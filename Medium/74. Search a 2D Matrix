// https://leetcode.com/problems/search-a-2d-matrix/

--O(log(m*n))
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m=matrix.length;
        int n=matrix[0].length;
        int low=0,high=m*n-1;
        
        while(low<=high){
            int mid=low+(high-low)/2;
            
            int row=mid/n;
            int col=mid%n;
            
            if(matrix[row][col]==target){
                return true;
            }
            else if(matrix[row][col]<target){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return false;
    }
}


--O(m*logn)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m=matrix.length;
        int n=matrix[0].length;
        
        for(int i=0;i<m;i++){
            if(target>=matrix[i][0] && target<=matrix[i][n-1]){
                return binarySearch(matrix[i],target);
            }
        }
        return false;
    }

    public boolean binarySearch(int[] arr,int target){
        int low=0,high=arr.length-1;
        
        while(low<=high){
            int mid=low+(high-low)/2;
            if(arr[mid]==target)
                return true;
            else if(arr[mid]<target)
                low=mid+1;
            else
                high=mid-1;
        }
        return false;
    }
}


--O(m*n)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==target)
                    return true;
            }
        }
        return false;
    }
}
