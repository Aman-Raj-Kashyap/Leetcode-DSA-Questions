// https://leetcode.com/problems/single-element-in-a-sorted-array/

-- O(logn)
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n=nums.length;
        
        if(n==1){
            return nums[0];
        }
        if(nums[0]!=nums[1]){
            return nums[0];
        }
        if(nums[n-1]!=nums[n-2]){
            return nums[n-1];
        }
        
        int low=0,high=n-1;
        
        while(low<=high){
            int mid=low+(high-low)/2;
            
            if(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1]){
                return nums[mid];
            }
            else if(nums[mid]==nums[mid-1]){
                //low to mid count (left side)
                int lc=mid-low+1;
                if(lc%2==0){
                    low=mid+1;
                }
                else{
                    high=mid-2;
                }
            }
            else if(nums[mid]==nums[mid+1]){
                //mid to high count (right side)
                int rc=high-mid+1;
                
                if(rc%2==0){
                    high=mid-1;
                }
                else{
                    low=mid+2;
                }
            }
        }
        
        return -1;
    }
}

--O(n)
Using XOR
Since XOR of same number return 0, at last single number will remain, so it will give number as answer.

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int result=0;
        for(int i=0;i<nums.length;i++){
            result=result^nums[i];
        }
        return result;
    }
}


--O(n)
class Solution {
    public int singleNonDuplicate(int[] nums) {
        if(nums.length==1) return nums[0];
        if(nums[0]!=nums[1]) return nums[0];
        if(nums[nums.length-1]!=nums[nums.length-2]) return nums[nums.length-1]; 
        
        for(int i=0;i<nums.length;i+=2){
            if(nums[i]!=nums[i+1]) return nums[i];
        }
        return -1;
    }
}
