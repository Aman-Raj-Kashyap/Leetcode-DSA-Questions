// https://leetcode.com/problems/find-the-duplicate-number/

--O(n)
class Solution {
    public int findDuplicate(int[] nums) {
        int slow=0,fast=0;
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        
        slow=0;
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
}


--O(n) O(n)
class Solution {
    public int findDuplicate(int[] nums) {
        int[] arr=new int[nums.length];
        for(int i=0;i<nums.length;i++){
            arr[nums[i]]++;
        }
        
        for(int i=1;i<arr.length;i++){
            if(arr[i]>1) return i;
        }
        return -1;
    }
}


--O(nlogn)
class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        int dup=-1;
        for(int i=1;i<nums.length;i++){
            if(nums[i]==nums[i-1]){
                dup=nums[i];
            }
        }
        return dup;
    }
}
