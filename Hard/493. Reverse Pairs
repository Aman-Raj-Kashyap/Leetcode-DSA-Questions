// https://leetcode.com/problems/reverse-pairs/

--O(nlogn)
class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums,0,nums.length-1);
    }
    
    public int mergeSort(int[] arr,int low,int high){
        if(low>=high) return 0;
        int count=0;
        int mid=low+(high-low)/2;
        
        count+=mergeSort(arr,low,mid);
        count+=mergeSort(arr,mid+1,high);
        count+=countPairs(arr,low,mid,high);
        merge(arr,low,mid,high);
        return count;
    }
    
    
    public int countPairs(int[] arr,int low,int mid,int high){
        int right=mid+1;
        int count=0;
        for(int i=low;i<=mid;i++){
            while(right<=high && (long)arr[i]>(long)2*arr[right]) right++;
            count+=(right-(mid+1));
        }
        return count;
    }
    
    public void merge(int[] arr,int low,int mid,int high){
        ArrayList<Integer> list=new ArrayList<>();
        
        int left=low,right=mid+1;
        
        while(left<=mid && right<=high){
            if(arr[left]<arr[right]){
                list.add(arr[left]);
                left++;
            }
            else{
                list.add(arr[right]);
                right++;
            }
        }
        
        while(left<=mid){
            list.add(arr[left]);
            left++;
        }
        while(right<=high){
            list.add(arr[right]);
            right++;
        }
        
        for(int i=low;i<=high;i++){
            arr[i]=list.get(i-low);
        }
    }
}


--O(nlogn)
class Solution {
    public int reversePairs(int[] nums) {
        int count=0;        
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if((long)nums[i]>(long)2*nums[j]) count++;
            }
        }
        return count;
    }
}
