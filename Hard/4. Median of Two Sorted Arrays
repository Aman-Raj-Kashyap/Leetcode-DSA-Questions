// https://leetcode.com/problems/median-of-two-sorted-arrays/

--O(n)
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int indexEle1=-1,indexEle2=-1;
        
        int index2=(nums1.length+nums2.length)/2;
        int index1=index2-1;
        
        int count=0;
        int i=0,j=0;
        
        while(i<nums1.length && j<nums2.length){
            if(nums1[i]<nums2[j]){
                if(count==index1) indexEle1=nums1[i];
                if(count==index2) indexEle2=nums1[i];
                count++;
                i++;
            }
            else{
                if(count==index1) indexEle1=nums2[j];
                if(count==index2) indexEle2=nums2[j];
                count++;
                j++;
            }
        }
        
        while(i<nums1.length){
            if(count==index1) indexEle1=nums1[i];
            if(count==index2) indexEle2=nums1[i];
            count++;
            i++;
        }
        
        while(j<nums2.length){
            if(count==index1) indexEle1=nums2[j];
            if(count==index2) indexEle2=nums2[j];
            count++;
            j++;
        }
        
        if((nums1.length+nums2.length)%2==1)
            return indexEle2;
        else
            return (double)(indexEle1+indexEle2)/2.0;
    }
}
        


-- O(n) O(n)
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        ArrayList<Integer> list=new ArrayList<>();
        
        int i=0,j=0;
        while(i<nums1.length && j<nums2.length){
            if(nums1[i]<=nums2[j]){
                list.add(nums1[i++]);
            }
            else{
                list.add(nums2[j++]);
            }
        }
        
        while(i<nums1.length){
            list.add(nums1[i++]);
        }
        while(j<nums2.length){
            list.add(nums2[j++]);
        }
        
        int n=nums1.length+nums2.length;
        if(n%2==1){
            return list.get(n/2);
        }
        else{
            return (double)((double)list.get(n/2)+(double)list.get(n/2-1))/2.0;
        }
        
    }
}
