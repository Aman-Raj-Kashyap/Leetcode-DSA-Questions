// https://leetcode.com/problems/intersection-of-two-linked-lists/

--Short
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null || headB==null) return null;
        
        ListNode a=headA;
        ListNode b=headB;
        
        while(a!=b){
            a= a==null?headB:a.next;
            b= b==null?headA:b.next;
        }
        return a;
    }
}


-- O(m+n) O(1)
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int sizeA=size(headA);
        int sizeB=size(headB);
        
        if(sizeA>sizeB){
            int skip=sizeA-sizeB;
            
            for(int i=0;i<skip;i++){
                headA=headA.next;
            }
        }
        else{
            int skip=sizeB-sizeA;
            
            for(int i=0;i<skip;i++){
                headB=headB.next;
            }
        }
        
        ListNode temp=headA;
        while(temp!=null){
            if(headA==headB)
                return headA;
            headA=headA.next;
            headB=headB.next;
        }
        
        return null;
    }
    
    public int size(ListNode node){
        int size=0;
        while(node!=null){
            size++;
            node=node.next;
        }
        return size;
    }
}


--O(m+n) O(n)
Using HashMap, storing all nodes of list1 and again iterating second list, will give the intersection point
