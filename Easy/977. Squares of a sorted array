// https://leetcode.com/problems/squares-of-a-sorted-array/

Approach 1 -- Naive(O(nlogn))
==================================
class Solution {
    public int[] sortedSquares(int[] nums) {
      for(int i=0;i<nums.length;i++){
          nums[i]=nums[i]*nums[i];
      }
        
      Arrays.sort(nums);
      return nums;
    }
}


Approach 2 -- Efficient(O(n))
==================================
class Solution {
    public int[] sortedSquares(int[] nums) {
        int n=nums.length;
        int[] ans=new int[n];

        int low=0,high=n-1;

        for(int a=n-1;a>=0;a--){
            if(Math.abs(nums[low])>Math.abs(nums[high])){
                ans[a]=nums[low]*nums[low];
                low++;
            }
            else{
                ans[a]=nums[high]*nums[high];
                high--;
            }
        }
        return ans;
    }
}

