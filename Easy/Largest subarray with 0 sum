// https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1

--O(n) O(n)
class GfG
{
    int maxLen(int arr[], int n){
        if(n<=1) return n;
        
        HashMap<Integer,Integer> map=new HashMap<>();
        int maxLen=0;
        
        int i=-1;
        int sum=0;
        map.put(sum,i);
        
        while(i<n-1){
            i++;
            sum+=arr[i];
            
            if(!map.containsKey(sum)){
                map.put(sum,i);
            }
            else{
                int index=map.get(sum);
                maxLen=Math.max(maxLen,i-index);
            }
        }
        return maxLen;
    }
}


-- O(n2)
class GfG
{
    int maxLen(int arr[], int n){
        if(n==1) return 1;
        
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n-1;i++){
            int curr=arr[i];
            int count=0;
            for(int j=i+1;j<n;j++){
                curr+=arr[j];
                if(curr==0){
                    count=(j-i+1);
                    max=Math.max(count,max);
                }
            }
        }
        return max==-2147483648?0:max;
    }
}
